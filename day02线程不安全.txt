package com.zxelec.day001.test;

import java.util.concurrent.CountDownLatch;

/**
 * 线程不安全的问题
 */
public class UnsafeThread {

    private static int num = 0;

    private static CountDownLatch countDownLatch = new CountDownLatch(10);

    public static void addNum() {
        num++;
    }

    public static void main(String[] args) {

        for (int i = 0; i < 10; i++) {

            new Thread(() -> {
                for (int j = 0; j < 100; j++) {
                    addNum();
                    try {
                        Thread.sleep(10L);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                //每执行完一次就调用countDown
                countDownLatch.countDown();
            }).start();
        }

        while (true) {
            if (countDownLatch.getCount() == 0) {
                System.out.println(num);
                break;
            }
        }
    }
}

上面的程序是线程不安全的，，，本来的初衷是通过多线程来是num的数组增加到1000。但
是在运行的过程中num的值达不到我们想要的结果

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
为什么会出现多线程操作时的不确定行呢？我们可以通过反编译来查看，，，将这段代码
放入一个文件夹中依次输入命令：
javac -encoding UTF-8 xxx.java  （注：UTF-8是为了解决代码中有中文注释产生编译问题）
javap -c xxx.class (对class文件进行字节码反编译)

  public static void inCreate();
    Code:
       0: getstatic     #2      // Field num:I
       3: iconst_1
       4: iadd
       5: putstatic     #2      // Field num:I
       8: return

	这一段代码的含义能过体现出i++的实现过程。
       0: getstatic    //得到num并将其压入栈顶
       3: iconst_1     //将1压入栈顶
       4: iadd		   //将栈顶的两个元素相加
       5: putstatic    //将相加的结果压入栈顶
       8: return       //返回
	   
	这就说明i++是非原子行的操作，在多线程的情况下会出现问题
	Thread1 -------->num=0---------------->num = 1
	Thread2 -------->num=0---------------->num = 1
	
	当两个线程同时执行是，导致num最终的结果为1，而不是2
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

知识点：
CountDownLatch的概念  
	CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之
	间的通信（而不是用作互斥的作用）。  CountDownLatch能够使一个线程在等待另外一
	些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线
	程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，
	表示所有的线程都已经完成了任务，然后在CountDownLatch上等待的线程就可以恢复执
	行任务。  
CountDownLatch的用法  
	CountDownLatch典型用法1：某一线程在开始运行前等待n个线程执行完毕。将
	CountDownLatch的计数器初始化为n new CountDownLatch(n) ，每当一个任务线程执行
	完毕，就将计数器减1 countdownlatch.countDown()，当计数器的值变为0时，在
	CountDownLatch上 await() 的线程就会被唤醒。一个典型应用场景就是启动一个服务
	时，主线程需要等待多个组件加载完毕，之后再继续执行。  
	CountDownLatch典型用法2：实现多个线程开始执行任务的最大并行性。注意是并行性，
	不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到
	起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，
	将其计数器初始化为1，多个线程在开始执行任务前首先 coundownlatch.await()，当
	主线程调用 countDown() 时，计数器变为0，多个线程同时被唤醒。 
	CountDownLatch的不足  CountDownLatch是一次性的，计数器的值只能在构造方法中初
	始化一次，之后没有任何机制再次对其设置值，当CountDownLatch使用完毕后，它不能
	再次被使用。
